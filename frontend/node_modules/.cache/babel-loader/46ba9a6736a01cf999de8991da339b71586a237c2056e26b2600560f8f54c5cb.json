{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dinakaran\\\\Challenger\\\\frontend\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Quiz.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Quiz = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(30); // Timer set to 30 seconds for each question\n  const [timerActive, setTimerActive] = useState(true); // Whether the timer is running\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const res = await axios.get('http://localhost:5000/api/quiz');\n        setQuestions(res.data);\n      } catch (err) {\n        console.error('Error fetching questions:', err);\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  // Start the timer when the component is loaded\n  useEffect(() => {\n    if (timerActive && timer > 0) {\n      const timerId = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n\n      // Clear the timer when the component is unmounted or the timer expires\n      return () => clearInterval(timerId);\n    }\n\n    // When timer reaches 0, go to next question\n    if (timer === 0) {\n      handleNextQuestion();\n    }\n  }, [timer, timerActive]);\n\n  // Handle answering a question\n  const handleAnswer = isCorrect => {\n    if (isCorrect) setScore(score + 1);\n    handleNextQuestion();\n  };\n\n  // Move to the next question\n  const handleNextQuestion = () => {\n    setTimer(30); // Reset the timer for the next question\n    setCurrentQuestion(currentQuestion + 1);\n    setTimerActive(true); // Restart the timer\n  };\n  if (!questions.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 35\n  }, this);\n  if (currentQuestion >= questions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"quiz-header\",\n        children: \"Quiz Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"quiz-score\",\n        children: [\"Your score: \", score, \"/\", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-header-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"timer\",\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), quizCompleted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-completion\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"quiz-header\",\n        children: \"Quiz Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"quiz-score\",\n        children: [\"Your score: \", score, \"/\", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-home-btn\",\n        onClick: () => navigate('/') // Redirect to the home page\n        ,\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"quiz-question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-options\",\n        children: questions[currentQuestion].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"quiz-option\",\n          onClick: () => handleAnswer(index === questions[currentQuestion].correctOption),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(Quiz, \"vA8pM6m9cm7D2SaSuRy2FYDfM2I=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Quiz","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","timer","setTimer","timerActive","setTimerActive","fetchQuestions","res","get","data","err","console","error","timerId","setInterval","prevTimer","clearInterval","handleNextQuestion","handleAnswer","isCorrect","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","quizCompleted","onClick","navigate","question","options","map","option","index","correctOption","_c","$RefreshReg$"],"sources":["C:/Users/Dinakaran/Challenger/frontend/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Quiz.css';\r\n\r\nconst Quiz = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [timer, setTimer] = useState(30); // Timer set to 30 seconds for each question\r\n    const [timerActive, setTimerActive] = useState(true); // Whether the timer is running\r\n\r\n    useEffect(() => {\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                const res = await axios.get('http://localhost:5000/api/quiz');\r\n                setQuestions(res.data);\r\n            } catch (err) {\r\n                console.error('Error fetching questions:', err);\r\n            }\r\n        };\r\n        fetchQuestions();\r\n    }, []);\r\n\r\n    // Start the timer when the component is loaded\r\n    useEffect(() => {\r\n        if (timerActive && timer > 0) {\r\n            const timerId = setInterval(() => {\r\n                setTimer((prevTimer) => prevTimer - 1);\r\n            }, 1000);\r\n\r\n            // Clear the timer when the component is unmounted or the timer expires\r\n            return () => clearInterval(timerId);\r\n        }\r\n\r\n        // When timer reaches 0, go to next question\r\n        if (timer === 0) {\r\n            handleNextQuestion();\r\n        }\r\n    }, [timer, timerActive]);\r\n\r\n    // Handle answering a question\r\n    const handleAnswer = (isCorrect) => {\r\n        if (isCorrect) setScore(score + 1);\r\n        handleNextQuestion();\r\n    };\r\n\r\n    // Move to the next question\r\n    const handleNextQuestion = () => {\r\n        setTimer(30);  // Reset the timer for the next question\r\n        setCurrentQuestion(currentQuestion + 1);\r\n        setTimerActive(true); // Restart the timer\r\n    };\r\n\r\n    if (!questions.length) return <p>Loading questions...</p>;\r\n\r\n    if (currentQuestion >= questions.length) {\r\n        return (\r\n            <div className=\"quiz-container\">\r\n                <h2 className=\"quiz-header\">Quiz Completed!</h2>\r\n                <p className=\"quiz-score\">Your score: {score}/{questions.length}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"quiz-container\">\r\n            <div className=\"quiz-header-container\">\r\n                <p className=\"timer\">Time Left: {timer}s</p>\r\n            </div>\r\n    \r\n            {quizCompleted ? (\r\n                <div className=\"quiz-completion\">\r\n                    <h2 className=\"quiz-header\">Quiz Completed!</h2>\r\n                    <p className=\"quiz-score\">Your score: {score}/{questions.length}</p>\r\n                    <button\r\n                        className=\"back-home-btn\"\r\n                        onClick={() => navigate('/')}  // Redirect to the home page\r\n                    >\r\n                        Back to Home\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <h2 className=\"quiz-question\">{questions[currentQuestion].question}</h2>\r\n                    <div className=\"quiz-options\">\r\n                        {questions[currentQuestion].options.map((option, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className=\"quiz-option\"\r\n                                onClick={() => handleAnswer(index === questions[currentQuestion].correctOption)}\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}