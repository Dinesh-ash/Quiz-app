{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dinakaran\\\\Challenger\\\\frontend\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MonacoEditor from '@monaco-editor/react';\nimport { useNavigate } from 'react-router-dom';\nimport './Quiz.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CodeQuiz = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(30);\n  const [quizCompleted, setQuizCompleted] = useState(false); // Track quiz completion\n  const navigate = useNavigate(); // For navigation to home\n\n  // Fetch questions from the API\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const res = await axios.get('http://localhost:5000/api/quiz');\n        setQuestions(res.data); // Save the questions\n      } catch (err) {\n        console.error('Error fetching questions:', err);\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  // Timer functionality for each question\n  useEffect(() => {\n    if (timer <= 0) {\n      handleNextQuestion(); // Move to the next question when timer hits 0\n    } else {\n      const timerId = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerId); // Cleanup the timer\n    }\n  }, [timer]);\n\n  // Handle user answer selection\n  const handleAnswer = isCorrect => {\n    if (isCorrect) setScore(score + 1); // Increment score if answer is correct\n    handleNextQuestion(); // Move to the next question\n  };\n\n  // Move to the next question\n  const handleNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setTimer(30); // Reset timer for the next question\n      setCurrentQuestion(currentQuestion + 1); // Go to the next question\n    } else {\n      setQuizCompleted(true); // Set quiz as completed when all questions are answered\n    }\n  };\n\n  // Handle code submission for coding questions (optional, depending on your quiz type)\n  const handleCodeSubmit = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/verify', {\n        code\n      });\n      setFeedback(response.data.feedback);\n    } catch (error) {\n      console.error('Error verifying code:', error);\n    }\n  };\n\n  // Check if all questions are answered and mark quiz as completed\n  useEffect(() => {\n    if (currentQuestion >= questions.length) {\n      setQuizCompleted(true); // Mark as complete once all questions have been answered\n    }\n  }, [currentQuestion, questions.length]);\n\n  // Show loading message if questions are not yet fetched\n  if (!questions.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 35\n  }, this); // Display loading text while fetching questions\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-header-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"timer\",\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), quizCompleted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-completion\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"quiz-header\",\n        children: \"Quiz Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"quiz-score\",\n        children: [\"Your score: \", score, \"/\", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-home-btn\",\n        onClick: () => navigate('/') // Navigate to the home page\n        ,\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"quiz-question\",\n        children: [\"Question \", currentQuestion + 1, \": \", questions[currentQuestion].question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-options\",\n        children: questions[currentQuestion].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"quiz-option\",\n          onClick: () => handleAnswer(index === questions[currentQuestion].correctOption) // Correct answer check\n          ,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(CodeQuiz, \"olBMpNQWBpIveBOE4JbLbht6DiE=\", false, function () {\n  return [useNavigate];\n});\n_c = CodeQuiz;\nexport default CodeQuiz;\nvar _c;\n$RefreshReg$(_c, \"CodeQuiz\");","map":{"version":3,"names":["React","useState","useEffect","axios","MonacoEditor","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","CodeQuiz","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","timer","setTimer","quizCompleted","setQuizCompleted","navigate","fetchQuestions","res","get","data","err","console","error","handleNextQuestion","timerId","setInterval","prevTimer","clearInterval","handleAnswer","isCorrect","length","handleCodeSubmit","response","post","code","setFeedback","feedback","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","question","options","map","option","index","correctOption","_c","$RefreshReg$"],"sources":["C:/Users/Dinakaran/Challenger/frontend/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MonacoEditor from '@monaco-editor/react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Quiz.css';\r\n\r\nconst CodeQuiz = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [timer, setTimer] = useState(30);\r\n    const [quizCompleted, setQuizCompleted] = useState(false);  // Track quiz completion\r\n    const navigate = useNavigate(); // For navigation to home\r\n\r\n    // Fetch questions from the API\r\n    useEffect(() => {\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                const res = await axios.get('http://localhost:5000/api/quiz');\r\n                setQuestions(res.data);  // Save the questions\r\n            } catch (err) {\r\n                console.error('Error fetching questions:', err);\r\n            }\r\n        };\r\n        fetchQuestions();\r\n    }, []);\r\n\r\n    // Timer functionality for each question\r\n    useEffect(() => {\r\n        if (timer <= 0) {\r\n            handleNextQuestion(); // Move to the next question when timer hits 0\r\n        } else {\r\n            const timerId = setInterval(() => {\r\n                setTimer((prevTimer) => prevTimer - 1);\r\n            }, 1000);\r\n            return () => clearInterval(timerId);  // Cleanup the timer\r\n        }\r\n    }, [timer]);\r\n\r\n    // Handle user answer selection\r\n    const handleAnswer = (isCorrect) => {\r\n        if (isCorrect) setScore(score + 1);  // Increment score if answer is correct\r\n        handleNextQuestion();  // Move to the next question\r\n    };\r\n\r\n    // Move to the next question\r\n    const handleNextQuestion = () => {\r\n        if (currentQuestion < questions.length - 1) {\r\n            setTimer(30);  // Reset timer for the next question\r\n            setCurrentQuestion(currentQuestion + 1);  // Go to the next question\r\n        } else {\r\n            setQuizCompleted(true);  // Set quiz as completed when all questions are answered\r\n        }\r\n    };\r\n\r\n    // Handle code submission for coding questions (optional, depending on your quiz type)\r\n    const handleCodeSubmit = async () => {\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/api/verify', { code });\r\n            setFeedback(response.data.feedback);\r\n        } catch (error) {\r\n            console.error('Error verifying code:', error);\r\n        }\r\n    };\r\n\r\n    // Check if all questions are answered and mark quiz as completed\r\n    useEffect(() => {\r\n        if (currentQuestion >= questions.length) {\r\n            setQuizCompleted(true);  // Mark as complete once all questions have been answered\r\n        }\r\n    }, [currentQuestion, questions.length]);\r\n\r\n    // Show loading message if questions are not yet fetched\r\n    if (!questions.length) return <p>Loading questions...</p>;  // Display loading text while fetching questions\r\n\r\n    return (\r\n        <div className=\"quiz-container\">\r\n            <div className=\"quiz-header-container\">\r\n                <p className=\"timer\">Time Left: {timer}s</p>\r\n            </div>\r\n\r\n            {quizCompleted ? (\r\n                <div className=\"quiz-completion\">\r\n                    <h2 className=\"quiz-header\">Quiz Completed!</h2>\r\n                    <p className=\"quiz-score\">Your score: {score}/{questions.length}</p>\r\n                    <button\r\n                        className=\"back-home-btn\"\r\n                        onClick={() => navigate('/')}  // Navigate to the home page\r\n                    >\r\n                        Back to Home\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <h2 className=\"quiz-question\">\r\n                        Question {currentQuestion + 1}: {questions[currentQuestion].question}\r\n                    </h2>\r\n                    <div className=\"quiz-options\">\r\n                        {questions[currentQuestion].options.map((option, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className=\"quiz-option\"\r\n                                onClick={() => handleAnswer(index === questions[currentQuestion].correctOption)}  // Correct answer check\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CodeQuiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}