{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dinakaran\\\\Challenger\\\\frontend\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\nimport './Quiz.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CodeQuiz = () => {\n  _s();\n  const [questions, setQuestions] = useState([]); // Store the quiz questions\n  const [currentQuestion, setCurrentQuestion] = useState(0); // Track current question index\n  const [score, setScore] = useState(0); // Track the score\n  const [timer, setTimer] = useState(30); // Timer for each question\n  const [quizCompleted, setQuizCompleted] = useState(false); // Track quiz completion\n  const navigate = useNavigate(); // To navigate to other pages\n\n  // Fetch quiz questions from the backend\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const res = await axios.get('http://localhost:5000/api/quiz'); // Adjust your endpoint\n        setQuestions(res.data); // Store the questions\n      } catch (err) {\n        console.error('Error fetching questions:', err);\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  // Timer logic for each question\n  useEffect(() => {\n    if (timer <= 0) {\n      handleNextQuestion(); // Move to the next question when timer hits 0\n    } else {\n      const timerId = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerId); // Cleanup timer when component unmounts\n    }\n  }, [timer]);\n\n  // Handle user answer selection\n  const handleAnswer = isCorrect => {\n    if (isCorrect) setScore(score + 1); // Increment score if answer is correct\n    handleNextQuestion(); // Move to the next question\n  };\n\n  // Move to the next question\n  const handleNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setTimer(30); // Reset timer for the next question\n      setCurrentQuestion(currentQuestion + 1); // Go to the next question\n    } else {\n      setQuizCompleted(true); // Set quiz as completed when all questions are answered\n    }\n  };\n\n  // Display the results and \"Back to Home\" button\n  const renderQuizCompletion = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-completion\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"quiz-header\",\n      children: \"Quiz Completed!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"quiz-score\",\n      children: [\"Your score: \", score, \"/\", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-home-btn\",\n      onClick: () => navigate('/') // Navigate back to the home page\n      ,\n      children: \"Back to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n\n  // Show loading message if questions are not yet fetched\n  if (!questions.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 35\n  }, this);\n\n  // Display questions if quiz is not completed yet\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-header-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"timer\",\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), quizCompleted ? renderQuizCompletion() // Render the completion screen\n    : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"quiz-question\",\n        children: [\"Question \", currentQuestion + 1, \": \", questions[currentQuestion].question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-options\",\n        children: questions[currentQuestion].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"quiz-option\",\n          onClick: () => handleAnswer(index === questions[currentQuestion].correctOption) // Check if answer is correct\n          ,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(CodeQuiz, \"h9O2hvcfZ+yt90U9w4kpNg08svY=\", false, function () {\n  return [useNavigate];\n});\n_c = CodeQuiz;\nexport default CodeQuiz;\nvar _c;\n$RefreshReg$(_c, \"CodeQuiz\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","CodeQuiz","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","timer","setTimer","quizCompleted","setQuizCompleted","navigate","fetchQuestions","res","get","data","err","console","error","handleNextQuestion","timerId","setInterval","prevTimer","clearInterval","handleAnswer","isCorrect","length","renderQuizCompletion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","question","options","map","option","index","correctOption","_c","$RefreshReg$"],"sources":["C:/Users/Dinakaran/Challenger/frontend/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';  // Import useNavigate for navigation\r\nimport './Quiz.css';\r\n\r\nconst CodeQuiz = () => {\r\n    const [questions, setQuestions] = useState([]);  // Store the quiz questions\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);  // Track current question index\r\n    const [score, setScore] = useState(0);  // Track the score\r\n    const [timer, setTimer] = useState(30);  // Timer for each question\r\n    const [quizCompleted, setQuizCompleted] = useState(false);  // Track quiz completion\r\n    const navigate = useNavigate(); // To navigate to other pages\r\n\r\n    // Fetch quiz questions from the backend\r\n    useEffect(() => {\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                const res = await axios.get('http://localhost:5000/api/quiz');  // Adjust your endpoint\r\n                setQuestions(res.data);  // Store the questions\r\n            } catch (err) {\r\n                console.error('Error fetching questions:', err);\r\n            }\r\n        };\r\n        fetchQuestions();\r\n    }, []);\r\n\r\n    // Timer logic for each question\r\n    useEffect(() => {\r\n        if (timer <= 0) {\r\n            handleNextQuestion();  // Move to the next question when timer hits 0\r\n        } else {\r\n            const timerId = setInterval(() => {\r\n                setTimer((prevTimer) => prevTimer - 1);\r\n            }, 1000);\r\n            return () => clearInterval(timerId);  // Cleanup timer when component unmounts\r\n        }\r\n    }, [timer]);\r\n\r\n    // Handle user answer selection\r\n    const handleAnswer = (isCorrect) => {\r\n        if (isCorrect) setScore(score + 1);  // Increment score if answer is correct\r\n        handleNextQuestion();  // Move to the next question\r\n    };\r\n\r\n    // Move to the next question\r\n    const handleNextQuestion = () => {\r\n        if (currentQuestion < questions.length - 1) {\r\n            setTimer(30);  // Reset timer for the next question\r\n            setCurrentQuestion(currentQuestion + 1);  // Go to the next question\r\n        } else {\r\n            setQuizCompleted(true);  // Set quiz as completed when all questions are answered\r\n        }\r\n    };\r\n\r\n    // Display the results and \"Back to Home\" button\r\n    const renderQuizCompletion = () => (\r\n        <div className=\"quiz-completion\">\r\n            <h2 className=\"quiz-header\">Quiz Completed!</h2>\r\n            <p className=\"quiz-score\">Your score: {score}/{questions.length}</p>\r\n            <button\r\n                className=\"back-home-btn\"\r\n                onClick={() => navigate('/')}  // Navigate back to the home page\r\n            >\r\n                Back to Home\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    // Show loading message if questions are not yet fetched\r\n    if (!questions.length) return <p>Loading questions...</p>;\r\n\r\n    // Display questions if quiz is not completed yet\r\n    return (\r\n        <div className=\"quiz-container\">\r\n            <div className=\"quiz-header-container\">\r\n                <p className=\"timer\">Time Left: {timer}s</p>\r\n            </div>\r\n\r\n            {quizCompleted ? (\r\n                renderQuizCompletion()  // Render the completion screen\r\n            ) : (\r\n                <>\r\n                    <h2 className=\"quiz-question\">\r\n                        Question {currentQuestion + 1}: {questions[currentQuestion].question}\r\n                    </h2>\r\n                    <div className=\"quiz-options\">\r\n                        {questions[currentQuestion].options.map((option, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className=\"quiz-option\"\r\n                                onClick={() => handleAnswer(index === questions[currentQuestion].correctOption)}  // Check if answer is correct\r\n                            >\r\n                                {option}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CodeQuiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}